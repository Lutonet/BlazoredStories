@page "/ResetPassword"
@using System.Text;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.WebUtilities;
@using StoriesWeb.Models.Dto;
@using System.Text.RegularExpressions;
@inject UserManager<UserModel> _userManager;
@inject IStringLocalizer<ResetPassword> t;
@inject NavigationManager _navigation


<MudText Typo="Typo.h5" Class="m-3">@t["Reset Password"]</MudText>
<MudGrid>
    <MudItem sm="7" xs="12">
        <MudPaper Elevation="2" Class="p-3 m-5">
<MudForm @ref="resetForm" @bind-IsValid="@success" @bind-Errors="@errors">
      <MudTextField T="string" @bind-Value="@model.Email" Label=@t["Email"] Required="true" RequiredError=@t["Email is required"] InputType="InputType.Email" />
      <MudTextField T="string" @bind-value="@model.Password" Label=@t["Password"] @ref="pwd" Required="true" RequiredError=@t["Password is required"] Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" InputType="InputType.Password" />
      <MudTextField T="string" @bind-value="@model.PasswordConfirm" Label=@t["Password again"] Required="true" RequiredError=@t["Password again is required"] InputType="InputType.Password" Validation="@(new Func<string, string>(PasswordMatch))" />
      <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="false" OnClick="@(async () => await ResetPass())">@t["Save"]</MudButton>
    </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem sm="5" xs="12">
        @if(showMessage)
        {
            <MudPaper Elevation="2" Class="p-3 m-5">
            @if (showSuccess)
            {
                <ReportComponent Report="report"></ReportComponent>
            }
            @if (showError)
            {
          
            }
            </MudPaper>
        }
  </MudItem>
 </MudGrid>

@code {
  string code;
  PasswordResetDto model = new();
  Report report = new();
  MudForm resetForm = new();
  MudTextField<string>? pwd;
  bool showMessage = false;
  bool showSuccess = false;
  bool showError = false;
  string message = string.Empty;
  bool success;
  string[] errors = { };

  private IEnumerable<string> PasswordStrength(string pw)
  {
    if (string.IsNullOrWhiteSpace(pw))
    {
      yield return t["Password is required"];
      yield break;
    }
    if (pw.Length < 8)
      yield return t["Password must be at least of length 8"];
    if (!Regex.IsMatch(pw, @"[A-Z]"))
      yield return t["Password must contain at least one capital letter"];
    if (!Regex.IsMatch(pw, @"[a-z]"))
      yield return t["Password must contain at least one lowercase letter"];
    if (!Regex.IsMatch(pw, @"[0-9]"))
      yield return t["Password must contain at least one digit"];
  }
  private string PasswordMatch(string arg)
  {
    if (pwd.Value != arg)
      return t["Passwords don't match"];
    return null;
  }

  string GetQueryParam()
  {
    var uriBuilder = new UriBuilder(_navigation.Uri);
    var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
    string code = q["code"];
    MudTextField<string>? pwd;
    return code;
  }
  protected override async Task OnInitializedAsync()
  {
    code = GetQueryParam();
  }

  public async Task ResetPass()
  {
    await resetForm.Validate();
    if (errors.Length == 0)
    {
      if (code == null)
      {
        message = t["A code must be supplied for password reset."];
        showMessage = true;
        showError = true;
        report.Type = ReportTypes.error;
        report.Text = message;
      }
      else
      {
        code = ASCIIEncoding.UTF8.GetString(WebEncoders.Base64UrlDecode(code));
        var user = await _userManager.FindByEmailAsync(model.Email);
        if (user == null)
        {
          message = t["Error resetting the password"];
          showMessage = true;
          showError = true;
          report.Type = ReportTypes.error;
          report.Text = message;
        }
        else
        {
          var result = await _userManager.ResetPasswordAsync(user, code, model.Password);
          if (result.Succeeded)
          {
            message = t["All done"];
            showMessage = true;
            showSuccess = true;
            report.Type = ReportTypes.success;
            report.Text = message;
          }
          else
          {
            var mess = result.Errors.FirstOrDefault();
            message = mess.Description;
            showError = true;
            showMessage = true;
            report.Type = ReportTypes.error;
            report.Text = message;
          }
        }

      }
    }
  }
}
