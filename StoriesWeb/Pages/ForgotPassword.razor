@page "/ForgotPassword"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.WebUtilities;
@using StoriesWeb.Services;
@using System.Text;
@inject IStringLocalizer<ResendEmailConfirmation> t;
@inject IEmailService _emailSender;
@inject ApplicationDbContext _context;
@inject UserManager<UserModel> _userManager;

<MudText Typo="Typo.h5" Class="text-center m-3">@t["Forgotten password"]</MudText>
<MudGrid>
  <MudItem sm="12" lg="5" Class="mt-3">
    <MudPaper Elevation="2" Class="p-3 m-5">
      <MudForm @ref="forgottenPassword" @bind-IsValid="@success" @bind-Errors="@errors">
        <MudTextField T="string" @bind-Value="@Email" Label=@t["Email"] Required="true" RequiredError=@t["Email is required"] InputType="InputType.Email" />
        <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" @onclick="@(async () => await Resend())">@t["Send password reset code"]</MudButton>
      </MudForm>
      @if (showSuccess)
      {
        <div style="margin: 10px;">
          <MudAlert Severity="Severity.Success">
            @message
          </MudAlert>
        </div>
      }
    </MudPaper>
  </MudItem>
</MudGrid>
@code {
  bool showSuccess = false;
  bool success;
  string[] errors = { };
  string message;
  string Email = string.Empty;
  string returnUrl;
  MudForm forgottenPassword = new();
  async Task Resend()
  {
    var user = await _userManager.FindByEmailAsync(Email);
    if (user == null || !(await _userManager.IsEmailConfirmedAsync(user)))
    {
      // Don't reveal that the user does not exist or is not confirmed
      showSuccess = true;
      success = true;
      message = t["Verification email sent. Please check your email."];
    }
    else
    {
      var code = await _userManager.GeneratePasswordResetTokenAsync(user);
      code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
      returnUrl = await _context.ApplicationSetups.Select(s => s.ApplicationUrl).FirstOrDefaultAsync();
      var callbackUrl = returnUrl + "/ResetPassword?code=" + code;
      var result = await _emailSender.SendResetPasswordCodeAsync(callbackUrl, Email);
      if (result.Successful)
      {
        showSuccess = true;
        success = true;
        message = t["Verification email sent. Please check your email."];
      }
      else
      {
        showSuccess = true;
        success = true;
        message = t["Verification email sent. Please check your email."];
      }
    }
  }
}
